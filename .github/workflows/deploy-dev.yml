name: CI/CD Deployment Pipeline

on:
  push:
    branches: [ master ]
  workflow_dispatch:

permissions:
  contents: write
  actions: read
  id-token: write

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.package-version.outputs.version }}
      commit_message: ${{ steps.commit.outputs.message }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Get package.json version
        id: package-version
        run: |
          VERSION=$(jq -r .version package.json || echo "")
          if [ -z "$VERSION" ] || [ "$VERSION" = "null" ]; then
            VERSION="0.0.0"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Get commit message
        id: commit
        run: echo "message=$(git log -1 --pretty=%s)" >> $GITHUB_OUTPUT

      - name: Install & Build
        run: |
          bun install
          bun run build
          zip -r build.zip .

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-artifact
          path: build.zip

  deploy-dev:
    needs: build
    runs-on: ubuntu-latest
    environment: dev
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Download Artifact
        uses: actions/download-artifact@v4
        with:
          name: build-artifact
      - name: Release Dev Build
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAG: dev-${{ needs.build.outputs.version }}-${{ github.run_number }}
          TITLE: ${{ needs.build.outputs.commit_message }}
          NOTE: Development build for internal testing
        run: gh release create "$TAG" build.zip --title "$TITLE" --notes "$NOTE"

  deploy-staging:
    needs: build
    runs-on: ubuntu-latest
    environment: staging
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Download Artifact
        uses: actions/download-artifact@v4
        with:
          name: build-artifact
      - name: Release Staging Build
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAG: staging-${{ needs.build.outputs.version }}-${{ github.run_number }}
          TITLE: ${{ needs.build.outputs.commit_message }}
          NOTE: Pre-production release for QA validation
        run: gh release create "$TAG" build.zip --title "$TITLE" --notes "$NOTE"

  deploy-production:
    needs: [build, deploy-staging] 
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Download Artifact
        uses: actions/download-artifact@v4
        with:
          name: build-artifact
      - name: Release Production Build
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAG: prod-${{ needs.build.outputs.version }}-${{ github.run_number }}
          TITLE: ${{ needs.build.outputs.commit_message }}
          NOTE: Production release - stable version
        run: gh release create "$TAG" build.zip --title "$TITLE" --notes "$NOTE"
